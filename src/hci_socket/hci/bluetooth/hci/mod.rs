#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

//!
//! This file is automatically generated by rust-bindgen and modified for more easy use.
//!
//! From header file `include/bluetooth/hci.h`
use libc::sa_family_t;

/// #define HCI_MAX_DEV        16
pub const HCI_MAX_DEV: usize = 16;

/// #define HCI_CHANNEL_USER   0
pub const HCI_CHANNEL_RAW: u16 = 0;

/// #define HCI_CHANNEL_USER   1
pub const HCI_CHANNEL_USER: u16 = 1;

/// #define HCI_CHANNEL_CONTROL        3
pub const HCI_CHANNEL_CONTROL: u16 = 3;

/// #define HCI_DEV_NONE       0xffff
pub const HCI_DEV_NONE: u16 = 0xffff;

/// #define HCI_FILTER 2
pub const HCI_FILTER: i32 = 2;

/// #define HCIGETDEVLIST _IOR('H', 210, int)
pub const HCI_GET_DEV_LIST_MAGIC: usize = (2u32 << 0i32 + 8i32 + 8i32 + 14i32 |
    (b'H' as (i32) << 0i32 + 8i32) as (u32) | (210i32 << 0i32) as (u32)) as
    (usize) | 4 /* (sizeof(i32)) */ << 0i32 + 8i32 + 8i32;

/// #define HCIGETDEVINFO	_IOR('H', 211, int)
pub const HCI_GET_DEV_INFO_MAGIC: usize = (2u32 << 0i32 + 8i32 + 8i32 + 14i32 |
    (b'H' as (i32) << 0i32 + 8i32) as (u32) | (211i32 << 0i32) as (u32)) as (usize) |
    4 /* (sizeof(i32)) */ << 0i32 + 8i32 + 8i32;

/// hci_dev_req.dev_opts : HCI device flags
pub const HCI_UP: u32 = 0;
pub const HCI_INIT: u32 = 1;
pub const HCI_RUNNING: u32 = 2;
pub const HCI_PSCAN: u32 = 3;
pub const HCI_ISCAN: u32 = 4;
pub const HCI_AUTH: u32 = 5;
pub const HCI_ENCRYPT: u32 = 6;
pub const HCI_INQUIRY: u32 = 7;
pub const HCI_RAW: u32 = 8;

/// Linux structure for hci socket
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_hci {
    pub hci_family: sa_family_t,
    pub hci_dev: u16,
    pub hci_channel: u16,
}

#[test]
fn bindgen_test_layout_sockaddr_hci() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_hci>(),
        6usize,
        concat!("Size of: ", stringify!(sockaddr_hci))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_hci>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr_hci))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_hci>())).hci_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_hci>())).hci_dev as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_hci>())).hci_channel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_hci),
            "::",
            stringify!(hci_channel)
        )
    );
}

/// Linux structure for hci device
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_req {
    pub dev_id: u16,
    pub dev_opt: u32,
}

#[test]
fn bindgen_test_layout_hci_dev_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_req>(),
        8usize,
        concat!("Size of: ", stringify!(hci_dev_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_req>())).dev_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_req),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_req>())).dev_opt as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_req),
            "::",
            stringify!(dev_opt)
        )
    );
}

/// Linux structure for list of hci device
#[repr(C)]
#[derive(Debug)]
pub struct hci_dev_list_req {
    pub dev_num: u16,
    pub dev_req: [hci_dev_req; HCI_MAX_DEV],
}

impl hci_dev_list_req {
    pub fn new() -> hci_dev_list_req {
        hci_dev_list_req {
            dev_num: HCI_MAX_DEV as u16,
            dev_req: [hci_dev_req {
                dev_id: 0,
                dev_opt: 0
            }; HCI_MAX_DEV]
        }
    }
}

#[test]
fn bindgen_test_layout_hci_dev_list_req() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_list_req>(),
        132usize,
        concat!("Size of: ", stringify!(hci_dev_list_req))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_list_req>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_list_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_list_req>())).dev_num as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_list_req),
            "::",
            stringify!(dev_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_list_req>())).dev_req as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_list_req),
            "::",
            stringify!(dev_req)
        )
    );
}

/// Linux structure for hci device information
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_info {
    pub dev_id: u16,
    pub name: [::std::os::raw::c_char; 8usize],
    pub bdaddr: bdaddr_t,
    pub flags: u32,
    pub type_: u8,
    pub features: [u8; 8usize],
    pub pkt_type: u32,
    pub link_policy: u32,
    pub link_mode: u32,
    pub acl_mtu: u16,
    pub acl_pkts: u16,
    pub sco_mtu: u16,
    pub sco_pkts: u16,
    pub stat: hci_dev_stats,
}

impl hci_dev_info {
    pub fn new(dev_id: Option<u16>) -> hci_dev_info {
        let new_dev_id = match dev_id {
            Some(d) => d,
            None => 0
        };

        hci_dev_info {
            dev_id: new_dev_id,
            name: [0; 8usize],
            bdaddr: bdaddr_t {
                b: [0; 6usize]
            },
            flags: 0,
            type_: 0,
            features: [0; 8usize],
            pkt_type: 0,
            link_policy: 0,
            link_mode: 0,
            acl_mtu: 0,
            acl_pkts: 0,
            sco_mtu: 0,
            sco_pkts: 0,
            stat: hci_dev_stats {
                err_rx: 0,
                err_tx: 0,
                cmd_tx: 0,
                evt_rx: 0,
                acl_tx: 0,
                acl_rx: 0,
                sco_tx: 0,
                sco_rx: 0,
                byte_rx: 0,
                byte_tx: 0
            }
        }
    }
}

#[test]
fn bindgen_test_layout_hci_dev_info() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_info>(),
        92usize,
        concat!("Size of: ", stringify!(hci_dev_info))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_info>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).dev_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(dev_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).name as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).bdaddr as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).type_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).features as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).pkt_type as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(pkt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).link_policy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(link_policy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).link_mode as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(link_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).acl_mtu as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(acl_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).acl_pkts as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(acl_pkts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).sco_mtu as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(sco_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).sco_pkts as *const _ as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(sco_pkts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_info>())).stat as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_info),
            "::",
            stringify!(stat)
        )
    );
}

/// Linux structure for bluetooth device address
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct bdaddr_t {
    pub b: [u8; 6usize],
}

#[test]
fn bindgen_test_layout_bdaddr_t() {
    assert_eq!(
        ::std::mem::size_of::<bdaddr_t>(),
        6usize,
        concat!("Size of: ", stringify!(bdaddr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<bdaddr_t>(),
        1usize,
        concat!("Alignment of ", stringify!(bdaddr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bdaddr_t>())).b as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bdaddr_t),
            "::",
            stringify!(b)
        )
    );
}

/// Linux structure for hci device stats
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hci_dev_stats {
    pub err_rx: u32,
    pub err_tx: u32,
    pub cmd_tx: u32,
    pub evt_rx: u32,
    pub acl_tx: u32,
    pub acl_rx: u32,
    pub sco_tx: u32,
    pub sco_rx: u32,
    pub byte_rx: u32,
    pub byte_tx: u32,
}

#[test]
fn bindgen_test_layout_hci_dev_stats() {
    assert_eq!(
        ::std::mem::size_of::<hci_dev_stats>(),
        40usize,
        concat!("Size of: ", stringify!(hci_dev_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<hci_dev_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(hci_dev_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).err_rx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(err_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).err_tx as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(err_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).cmd_tx as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(cmd_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).evt_rx as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(evt_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).acl_tx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(acl_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).acl_rx as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(acl_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).sco_tx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(sco_tx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).sco_rx as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(sco_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).byte_rx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(byte_rx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hci_dev_stats>())).byte_tx as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(hci_dev_stats),
            "::",
            stringify!(byte_tx)
        )
    );
}
