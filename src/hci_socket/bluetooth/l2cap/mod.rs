#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

//!
//! This file is automatically generated by rust-bindgen and modified for more easy use.
//!
//! From header file `include/bluetooth/l2cap.h`

use libc::sa_family_t;
use hci_socket::bluetooth::hci::{bdaddr_t};

/// Linux structure for bluetooth device address
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_l2 {
    pub l2_family: sa_family_t,
    pub l2_psm: u16,
    pub l2_bdaddr: bdaddr_t,
    pub l2_cid: u16,
    pub l2_bdaddr_type: u8,
}

impl sockaddr_l2 {
    pub fn new(family: i32, l2cid: u16, addr_type: u8, address: [u8; 6usize]) -> sockaddr_l2 {
        sockaddr_l2 {
            l2_family: family as u16,
            l2_cid: l2cid,
            l2_bdaddr_type: addr_type,
            l2_psm: 0,
            l2_bdaddr: bdaddr_t {
                b: address
            }
        }
    }
}

#[test]
fn bindgen_test_layout_sockaddr_l2() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_l2>(),
        14usize,
        concat!("Size of: ", stringify!(sockaddr_l2))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_l2>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr_l2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_l2>())).l2_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_l2),
            "::",
            stringify!(l2_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_l2>())).l2_psm as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_l2),
            "::",
            stringify!(l2_psm)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_l2>())).l2_bdaddr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_l2),
            "::",
            stringify!(l2_bdaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_l2>())).l2_cid as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_l2),
            "::",
            stringify!(l2_cid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_l2>())).l2_bdaddr_type as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_l2),
            "::",
            stringify!(l2_bdaddr_type)
        )
    );
}